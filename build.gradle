buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
        //jcenter()
       // maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

plugins {
    //暂时未理解
    // https://plugins.gradle.org/plugin/net.ltgt.apt
    //id "net.ltgt.apt" version "0.18"
    // You can integrate with your IDEs.
    // See more details: https://github.com/tbroyer/gradle-apt-plugin#usage-with-ides
    //id "net.ltgt.apt-eclipse" version "0.18"
    //id "net.ltgt.apt-idea" version "0.18"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'com.palantir.docker'

group = 'nebula'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

bootJar {
    baseName = 'nebula.platform'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
    //jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')
    runtime('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.security:spring-security-web')
    compile('org.springframework.security:spring-security-data')
    compile('org.zalando:problem-spring-web:0.23.0')
    compile('org.springframework.security:spring-security-config')


    compile "org.hibernate:hibernate-jcache"
    compile "javax.cache:cache-api"
    compile "org.ehcache:ehcache"
    compile "org.springframework.boot:spring-boot-starter-cache"
    compile "org.springframework.boot:spring-boot-starter-undertow"

    compile "com.ryantenney.metrics:metrics-spring:3.1.3"
    compile "io.dropwizard.metrics:metrics-annotation"
    compile "io.dropwizard.metrics:metrics-core"
    compile "io.dropwizard.metrics:metrics-jcache:4.0.3"
    compile "io.dropwizard.metrics:metrics-json"
    compile "io.dropwizard.metrics:metrics-jvm"
    compile "io.dropwizard.metrics:metrics-servlet"
    compile "io.dropwizard.metrics:metrics-servlets"

    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner"

 //   compile "org.springframework.security:spring-security-data"
  //  compile "org.springframework.security:spring-security-web"
  //  compile "org.springframework.security:spring-security-messaging"

    compile('org.liquibase:liquibase-core')
    compile('io.jsonwebtoken:jjwt:0.9.0')
    compile('org.hibernate:hibernate-envers')
    compile('org.apache.commons:commons-lang3')

    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    // if you are using mapstruct in test code
    //testAnnotationProcessor 'org.mapstruct:mapstruct-processor:${mapstruct_version}'
    //annotationProcessor "org.hibernate:hibernate-jpamodelgen"
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

if (project.hasProperty('prod')) {
    apply from: 'profile_prod.gradle'

} else {
    apply from: 'profile_dev.gradle'
}


task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    //name "${project.group}/${bootJar.baseName}"
    name "${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}